<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function randomwalk(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var D; // EjsS Model.Variables.Var Table.D
  var xs; // EjsS Model.Variables.Var Table.xs
  var ys; // EjsS Model.Variables.Var Table.ys
  var zs; // EjsS Model.Variables.Var Table.zs
  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var z; // EjsS Model.Variables.Var Table.z
  var StepX; // EjsS Model.Variables.Var Table.StepX
  var StepY; // EjsS Model.Variables.Var Table.StepY
  var StepZ; // EjsS Model.Variables.Var Table.StepZ

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      D : D,
      xs : xs,
      ys : ys,
      zs : zs,
      x : x,
      y : y,
      z : z,
      StepX : StepX,
      StepY : StepY,
      StepZ : StepZ
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      D : D,
      xs : xs,
      ys : ys,
      zs : zs,
      x : x,
      y : y,
      z : z,
      StepX : StepX,
      StepY : StepY,
      StepZ : StepZ
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.zs != "undefined") zs = json.zs;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.StepX != "undefined") StepX = json.StepX;
    if(typeof json.StepY != "undefined") StepY = json.StepY;
    if(typeof json.StepZ != "undefined") StepZ = json.StepZ;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.zs != "undefined") zs = json.zs;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.StepX != "undefined") StepX = json.StepX;
    if(typeof json.StepY != "undefined") StepY = json.StepY;
    if(typeof json.StepZ != "undefined") StepZ = json.StepZ;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["randon direction selection"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    D = 0; // EjsS Model.Variables.Var Table.D
    xs = 0; // EjsS Model.Variables.Var Table.xs
    ys = 0; // EjsS Model.Variables.Var Table.ys
    zs = 0; // EjsS Model.Variables.Var Table.zs
    x = 0; // EjsS Model.Variables.Var Table.x
    y = 0; // EjsS Model.Variables.Var Table.y
    z = 0; // EjsS Model.Variables.Var Table.z
    StepX = 0; // EjsS Model.Variables.Var Table.StepX
    StepY = 0; // EjsS Model.Variables.Var Table.StepY
    StepZ = 0; // EjsS Model.Variables.Var Table.StepZ
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(10);
    _model.setStepsPerDisplay(1);
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["randon direction selection"]) return;
    D=Math.floor((Math.random() * 3) + 1);  // > Evolution.randon direction selection:1
    StepX=Math.floor((Math.random() * 2) + 1);  // > Evolution.randon direction selection:2
    StepY=Math.floor((Math.random() * 2) + 1);  // > Evolution.randon direction selection:3
    StepZ=Math.floor((Math.random() * 2) + 1);  // > Evolution.randon direction selection:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
      if(D==1)  // > FixedRelations.FixRel Page:1
      {  // > FixedRelations.FixRel Page:2
        if(StepX==1)  // > FixedRelations.FixRel Page:3
          {  // > FixedRelations.FixRel Page:4
            xs=xs-0.1;  // > FixedRelations.FixRel Page:5
            x=xs;  // > FixedRelations.FixRel Page:6
          }  // > FixedRelations.FixRel Page:7
          else  // > FixedRelations.FixRel Page:8
          {  // > FixedRelations.FixRel Page:9
            xs=xs+0.1;  // > FixedRelations.FixRel Page:10
            x=xs;  // > FixedRelations.FixRel Page:11
          }  // > FixedRelations.FixRel Page:12
      }  // > FixedRelations.FixRel Page:13
      if(D==2)  // > FixedRelations.FixRel Page:14
      {  // > FixedRelations.FixRel Page:15
        if(StepY==1)  // > FixedRelations.FixRel Page:16
          {  // > FixedRelations.FixRel Page:17
            ys=ys-0.1;  // > FixedRelations.FixRel Page:18
            y=ys;  // > FixedRelations.FixRel Page:19
          }  // > FixedRelations.FixRel Page:20
          else  // > FixedRelations.FixRel Page:21
          {  // > FixedRelations.FixRel Page:22
            ys=ys+0.1;  // > FixedRelations.FixRel Page:23
            y=ys;  // > FixedRelations.FixRel Page:24
          }  // > FixedRelations.FixRel Page:25
      }  // > FixedRelations.FixRel Page:26
      if(D==3)  // > FixedRelations.FixRel Page:27
      {  // > FixedRelations.FixRel Page:28
        if(StepZ==1)  // > FixedRelations.FixRel Page:29
          {  // > FixedRelations.FixRel Page:30
            zs=zs-0.1;  // > FixedRelations.FixRel Page:31
            z=zs;  // > FixedRelations.FixRel Page:32
          }  // > FixedRelations.FixRel Page:33
          else  // > FixedRelations.FixRel Page:34
          {  // > FixedRelations.FixRel Page:35
            zs=zs+0.1;  // > FixedRelations.FixRel Page:36
            z=zs;  // > FixedRelations.FixRel Page:37
          }  // > FixedRelations.FixRel Page:38
      }  // > FixedRelations.FixRel Page:39
       // > FixedRelations.FixRel Page:40
        // > FixedRelations.FixRel Page:41
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new randomwalk_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.sphere3D.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'sphere3D'
          _view.sphere3D.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'sphere3D'
          _view.sphere3D.linkProperty("Z",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'Z' for element 'sphere3D'
          _view.trail3D.linkProperty("InputZ",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'InputZ' for element 'trail3D'
          _view.trail3D.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail3D'
          _view.trail3D.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail3D'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(10);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function randomwalk_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = randomwalk_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function randomwalk_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawing3DPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawing3DPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Random walk in 3d</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel3D'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel3D'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("Draggable","ANY") // EJsS HtmlView.HtmlView Page: setting property 'Draggable' for element 'drawingPanel3D'
      .setProperty("MinimumX",-2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel3D'
      .setProperty("MinimumY",-2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel3D'
      .setProperty("MinimumZ",-2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumZ' for element 'drawingPanel3D'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("MaximumZ",2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumZ' for element 'drawingPanel3D'
      .setProperty("MaximumY",2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel3D'
      .setProperty("MaximumX",2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.sphere,"sphere3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'sphere3D'
      .setProperty("Radius",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'sphere3D'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"trail3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'trail3D'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width",398) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2021, Author name. Compiled with EJS 6.0 (191124)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new randomwalk("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
