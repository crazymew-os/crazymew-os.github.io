<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Motion of particle in Potential Field</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
function combined(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = EJSS_CORE.Tools;
  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x1; // EjsS Model.Variables.Cordinates.x1
  var y1; // EjsS Model.Variables.Cordinates.y1
  var x2; // EjsS Model.Variables.Cordinates.x2
  var y2; // EjsS Model.Variables.Cordinates.y2
  var R; // EjsS Model.Variables.Cordinates.R

  var dxo1; // EjsS Model.Variables.Dir coordinates.dxo1
  var dyo1; // EjsS Model.Variables.Dir coordinates.dyo1
  var dxo2; // EjsS Model.Variables.Dir coordinates.dxo2
  var dyo2; // EjsS Model.Variables.Dir coordinates.dyo2
  var dx1; // EjsS Model.Variables.Dir coordinates.dx1
  var dy1; // EjsS Model.Variables.Dir coordinates.dy1
  var dx2; // EjsS Model.Variables.Dir coordinates.dx2
  var dy2; // EjsS Model.Variables.Dir coordinates.dy2

  var Vf1; // EjsS Model.Variables.velocities.Vf1
  var Vf2; // EjsS Model.Variables.velocities.Vf2
  var v1x1; // EjsS Model.Variables.velocities.v1x1
  var v1y1; // EjsS Model.Variables.velocities.v1y1
  var v2x2; // EjsS Model.Variables.velocities.v2x2
  var v2y2; // EjsS Model.Variables.velocities.v2y2
  var t; // EjsS Model.Variables.velocities.t
  var vl1; // EjsS Model.Variables.velocities.vl1
  var vl2; // EjsS Model.Variables.velocities.vl2

  var rx1; // EjsS Model.Variables.rotated cordi.rx1
  var ry1; // EjsS Model.Variables.rotated cordi.ry1
  var rx2; // EjsS Model.Variables.rotated cordi.rx2
  var ry2; // EjsS Model.Variables.rotated cordi.ry2
  var a; // EjsS Model.Variables.rotated cordi.a
  var b; // EjsS Model.Variables.rotated cordi.b

  var X; // EjsS Model.Variables.CoM.X
  var Y; // EjsS Model.Variables.CoM.Y
  var m1; // EjsS Model.Variables.CoM.m1
  var m2; // EjsS Model.Variables.CoM.m2

  var k; // EjsS Model.Variables.energy.k
  var U; // EjsS Model.Variables.energy.U
  var L; // EjsS Model.Variables.energy.L
  var CB; // EjsS Model.Variables.energy.CB
  var EF; // EjsS Model.Variables.energy.EF
  var U1; // EjsS Model.Variables.energy.U1
  var r; // EjsS Model.Variables.energy.r

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x1 : x1,
      y1 : y1,
      x2 : x2,
      y2 : y2,
      R : R,
      dxo1 : dxo1,
      dyo1 : dyo1,
      dxo2 : dxo2,
      dyo2 : dyo2,
      dx1 : dx1,
      dy1 : dy1,
      dx2 : dx2,
      dy2 : dy2,
      Vf1 : Vf1,
      Vf2 : Vf2,
      v1x1 : v1x1,
      v1y1 : v1y1,
      v2x2 : v2x2,
      v2y2 : v2y2,
      t : t,
      vl1 : vl1,
      vl2 : vl2,
      rx1 : rx1,
      ry1 : ry1,
      rx2 : rx2,
      ry2 : ry2,
      a : a,
      b : b,
      X : X,
      Y : Y,
      m1 : m1,
      m2 : m2,
      k : k,
      U : U,
      L : L,
      CB : CB,
      EF : EF,
      U1 : U1,
      r : r
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.dxo1 != "undefined") dxo1 = json.dxo1;
    if(typeof json.dyo1 != "undefined") dyo1 = json.dyo1;
    if(typeof json.dxo2 != "undefined") dxo2 = json.dxo2;
    if(typeof json.dyo2 != "undefined") dyo2 = json.dyo2;
    if(typeof json.dx1 != "undefined") dx1 = json.dx1;
    if(typeof json.dy1 != "undefined") dy1 = json.dy1;
    if(typeof json.dx2 != "undefined") dx2 = json.dx2;
    if(typeof json.dy2 != "undefined") dy2 = json.dy2;
    if(typeof json.Vf1 != "undefined") Vf1 = json.Vf1;
    if(typeof json.Vf2 != "undefined") Vf2 = json.Vf2;
    if(typeof json.v1x1 != "undefined") v1x1 = json.v1x1;
    if(typeof json.v1y1 != "undefined") v1y1 = json.v1y1;
    if(typeof json.v2x2 != "undefined") v2x2 = json.v2x2;
    if(typeof json.v2y2 != "undefined") v2y2 = json.v2y2;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.vl1 != "undefined") vl1 = json.vl1;
    if(typeof json.vl2 != "undefined") vl2 = json.vl2;
    if(typeof json.rx1 != "undefined") rx1 = json.rx1;
    if(typeof json.ry1 != "undefined") ry1 = json.ry1;
    if(typeof json.rx2 != "undefined") rx2 = json.rx2;
    if(typeof json.ry2 != "undefined") ry2 = json.ry2;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.Y != "undefined") Y = json.Y;
    if(typeof json.m1 != "undefined") m1 = json.m1;
    if(typeof json.m2 != "undefined") m2 = json.m2;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.U != "undefined") U = json.U;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.CB != "undefined") CB = json.CB;
    if(typeof json.EF != "undefined") EF = json.EF;
    if(typeof json.U1 != "undefined") U1 = json.U1;
    if(typeof json.r != "undefined") r = json.r;
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model.addToReset(function() {
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["directions"] = true;
    __pagesEnabled["rotated cordinatess"] = true;
    __pagesEnabled["com"] = true;
    __pagesEnabled["Energies"] = true;
    __pagesEnabled["Velocities"] = true;
    __pagesEnabled["ccondition"] = true;
    __pagesEnabled["Graph"] = true;
  });

  _model.addToReset(function() {
    x1 = 1; // EjsS Model.Variables.Cordinates.x1
    y1 = 0; // EjsS Model.Variables.Cordinates.y1
    x2 = 0; // EjsS Model.Variables.Cordinates.x2
    y2 = 0; // EjsS Model.Variables.Cordinates.y2
    R = 0; // EjsS Model.Variables.Cordinates.R
  });

  _model.addToReset(function() {
    dxo1 = 0; // EjsS Model.Variables.Dir coordinates.dxo1
    dyo1 = 0; // EjsS Model.Variables.Dir coordinates.dyo1
    dxo2 = 0; // EjsS Model.Variables.Dir coordinates.dxo2
    dyo2 = 0; // EjsS Model.Variables.Dir coordinates.dyo2
    dx1 = 0; // EjsS Model.Variables.Dir coordinates.dx1
    dy1 = 0; // EjsS Model.Variables.Dir coordinates.dy1
    dx2 = 0; // EjsS Model.Variables.Dir coordinates.dx2
    dy2 = 0; // EjsS Model.Variables.Dir coordinates.dy2
  });

  _model.addToReset(function() {
    Vf1 = 0; // EjsS Model.Variables.velocities.Vf1
    Vf2 = 0; // EjsS Model.Variables.velocities.Vf2
    v1x1 = 0; // EjsS Model.Variables.velocities.v1x1
    v1y1 = 0; // EjsS Model.Variables.velocities.v1y1
    v2x2 = 0; // EjsS Model.Variables.velocities.v2x2
    v2y2 = 0; // EjsS Model.Variables.velocities.v2y2
    t = 0; // EjsS Model.Variables.velocities.t
    vl1 = 0; // EjsS Model.Variables.velocities.vl1
    vl2 = 0; // EjsS Model.Variables.velocities.vl2
  });

  _model.addToReset(function() {
    rx1 = 0; // EjsS Model.Variables.rotated cordi.rx1
    ry1 = 0; // EjsS Model.Variables.rotated cordi.ry1
    rx2 = 0; // EjsS Model.Variables.rotated cordi.rx2
    ry2 = 0; // EjsS Model.Variables.rotated cordi.ry2
    a = 90; // EjsS Model.Variables.rotated cordi.a
    b = 0; // EjsS Model.Variables.rotated cordi.b
  });

  _model.addToReset(function() {
    X = 0; // EjsS Model.Variables.CoM.X
    Y = 0; // EjsS Model.Variables.CoM.Y
    m1 = 1; // EjsS Model.Variables.CoM.m1
    m2 = 5; // EjsS Model.Variables.CoM.m2
  });

  _model.addToReset(function() {
    k = 4; // EjsS Model.Variables.energy.k
    U = 0; // EjsS Model.Variables.energy.U
    L = 10; // EjsS Model.Variables.energy.L
    CB = 0; // EjsS Model.Variables.energy.CB
    EF = 0; // EjsS Model.Variables.energy.EF
    U1 = 0; // EjsS Model.Variables.energy.U1
    r = 0.5; // EjsS Model.Variables.energy.r
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["directions"]) return;
    dxo1=(x1-x2);  // > FixedRelations.directions:1
    dyo1=(y1-y2);  // > FixedRelations.directions:2
    dxo2=(x2-x1);  // > FixedRelations.directions:3
    dyo2=(y2-y1);  // > FixedRelations.directions:4
    dx1=dxo2/(Math.sqrt((dxo2*dxo2)+(dyo2*dyo2)));  // > FixedRelations.directions:5
    dy1=dyo2/(Math.sqrt((dxo2*dxo2)+(dyo2*dyo2)));  // > FixedRelations.directions:6
    dx2=dxo1/(Math.sqrt((dxo1*dxo1)+(dyo1*dyo1)));  // > FixedRelations.directions:7
    dy2=dyo1/(Math.sqrt((dxo1*dxo1)+(dyo1*dyo1)));  // > FixedRelations.directions:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["rotated cordinatess"]) return;
    rx1=dx1*(Math.cos(a))-dy1*(Math.sin(a));  // > FixedRelations.rotated cordinatess:1
    ry1=dx1*(Math.sin(a))+dy1*(Math.cos(a));  // > FixedRelations.rotated cordinatess:2
    rx2=dx2*(Math.cos(a))-dy2*(Math.sin(a));  // > FixedRelations.rotated cordinatess:3
    ry2=dx2*(Math.sin(a))+dy2*(Math.cos(a));  // > FixedRelations.rotated cordinatess:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["com"]) return;
    X=((x1*m1)+(x2*m2))/(m1+m2);  // > FixedRelations.com:1
    Y=((y1*m1)+(y2*m2))/(m1+m2);  // > FixedRelations.com:2
    x2=((-x1*m1)/m2);  // > FixedRelations.com:3
    y2=((-y1*m1)/m2);  // > FixedRelations.com:4
    R=Math.sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1)));  // > FixedRelations.com:5
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Energies"]) return;
    U=-k/R;  // > FixedRelations.Energies:1
    vl1=L/(m1*R);  // > FixedRelations.Energies:2
    vl2=L/(m2/R);  // > FixedRelations.Energies:3
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Velocities"]) return;
    Vf1=Math.sqrt((2*-U)/m1);  // > FixedRelations.Velocities:1
    Vf2=Math.sqrt((2*-U)/m2);  // > FixedRelations.Velocities:2
    v1x1=(Vf1*dx1)+(vl1*rx1);  // > FixedRelations.Velocities:3
    v1y1=(Vf1*dy1)+(vl1*ry1);  // > FixedRelations.Velocities:4
    v2x2=(Vf2*dx2)+(vl2*rx2);  // > FixedRelations.Velocities:5
    v2y2=(Vf2*dy2)+(vl2*ry2);  // > FixedRelations.Velocities:6
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["ccondition"]) return;
    if(k<=0)  // > FixedRelations.ccondition:1
    {  // > FixedRelations.ccondition:2
    Vf1=0;  // > FixedRelations.ccondition:3
    Vf2=0;  // > FixedRelations.ccondition:4
    }  // > FixedRelations.ccondition:5
    else if(k>0)  // > FixedRelations.ccondition:6
    {  // > FixedRelations.ccondition:7
     }  // > FixedRelations.ccondition:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Graph"]) return;
    U1=-k/r;  // > FixedRelations.Graph:1
    CB=(L*L*Math.cos(a)*Math.cos(a))/(2*m1*r*r);  // > FixedRelations.Graph:2
    EF=U1+CB;  // > FixedRelations.Graph:3
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x1","y1","x2","y2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x1) __mustReinitialize = true;
        __state[__cIn++] = x1;
        if (__state[__cIn]!=y1) __mustReinitialize = true;
        __state[__cIn++] = y1;
        if (__state[__cIn]!=x2) __mustReinitialize = true;
        __state[__cIn++] = x2;
        if (__state[__cIn]!=y2) __mustReinitialize = true;
        __state[__cIn++] = y2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x1 = __state[__cOut++];
        y1 = __state[__cOut++];
        x2 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x1 = _aState[__cOut++];
        var y1 = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = v1x1; // Rate for ODE: Evol Page:x1
        _aRate[__cRate++] = v1y1; // Rate for ODE: Evol Page:y1
        _aRate[__cRate++] = v2x2; // Rate for ODE: Evol Page:x2
        _aRate[__cRate++] = v2y2; // Rate for ODE: Evol Page:y2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x1 = _aState[__cOut++];
        var y1 = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x1 = __state[__cOut++];
        y1 = __state[__cOut++];
        x2 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x1;
        __state[__cIn++] = y1;
        __state[__cIn++] = x2;
        __state[__cIn++] = y2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x1(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y1(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_x2(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y2(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : null, height : null };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new combined_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.p1.linkProperty("SizeX",  function() { return m1*0.1; } ); // HtmlView Page linking property 'SizeX' for element 'p1'
          _view.p1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'p1'
          _view.p1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'p1'
          _view.p1.linkProperty("SizeY",  function() { return m1*0.1; } ); // HtmlView Page linking property 'SizeY' for element 'p1'
          _view.force_on_p1.linkProperty("SizeX",  function() { return dx1; }, function(_v) { dx1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'force_on_p1'
          _view.force_on_p1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'force_on_p1'
          _view.force_on_p1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'force_on_p1'
          _view.force_on_p1.linkProperty("SizeY",  function() { return dy1; }, function(_v) { dy1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'force_on_p1'
          _view.t_vel_m1.linkProperty("SizeX",  function() { return rx1; }, function(_v) { rx1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 't_vel_m1'
          _view.t_vel_m1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 't_vel_m1'
          _view.t_vel_m1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 't_vel_m1'
          _view.t_vel_m1.linkProperty("SizeY",  function() { return ry1; }, function(_v) { ry1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 't_vel_m1'
          _view.m1_trace.linkProperty("InputX",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'InputX' for element 'm1_trace'
          _view.m1_trace.linkProperty("InputY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'm1_trace'
          _view.m1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'm1'
          _view.m1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'm1'
          _view.p2.linkProperty("SizeX",  function() { return m2*0.1; } ); // HtmlView Page linking property 'SizeX' for element 'p2'
          _view.p2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'p2'
          _view.p2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'p2'
          _view.p2.linkProperty("SizeY",  function() { return m2*0.1; } ); // HtmlView Page linking property 'SizeY' for element 'p2'
          _view.force_on_p2.linkProperty("SizeX",  function() { return dx2; }, function(_v) { dx2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'force_on_p2'
          _view.force_on_p2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'force_on_p2'
          _view.force_on_p2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'force_on_p2'
          _view.force_on_p2.linkProperty("SizeY",  function() { return dy2; }, function(_v) { dy2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'force_on_p2'
          _view.m2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'm2'
          _view.m2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'm2'
          _view.tracce_for_m2.linkProperty("InputX",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'InputX' for element 'tracce_for_m2'
          _view.tracce_for_m2.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'tracce_for_m2'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.L.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'L'
          _view.L_slider.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'L_slider'
          _view.k.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'k'
          _view.U.linkProperty("Value",  function() { return U; }, function(_v) { U = _v; } ); // HtmlView Page linking property 'Value' for element 'U'
          _view.angle_a.linkProperty("Value",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'Value' for element 'angle_a'
          _view.mass_12.linkProperty("Value",  function() { return m1; }, function(_v) { m1 = _v; } ); // HtmlView Page linking property 'Value' for element 'mass_12'
          _view.mw.linkProperty("Value",  function() { return m1; }, function(_v) { m1 = _v; } ); // HtmlView Page linking property 'Value' for element 'mw'
          _view.Mass_2.linkProperty("Value",  function() { return m2; }, function(_v) { m2 = _v; } ); // HtmlView Page linking property 'Value' for element 'Mass_2'
          _view.m22.linkProperty("Value",  function() { return m2; }, function(_v) { m2 = _v; } ); // HtmlView Page linking property 'Value' for element 'm22'
          _view.CB.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'CB'
          _view.CB.linkProperty("InputY",  function() { return CB; }, function(_v) { CB = _v; } ); // HtmlView Page linking property 'InputY' for element 'CB'
          _view.U2.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'U2'
          _view.U2.linkProperty("InputY",  function() { return U1; }, function(_v) { U1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'U2'
          _view.EF.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'EF'
          _view.EF.linkProperty("InputY",  function() { return EF; }, function(_v) { EF = _v; } ); // HtmlView Page linking property 'InputY' for element 'EF'
          _view.segment.linkProperty("X",  function() { return R; }, function(_v) { R = _v; } ); // HtmlView Page linking property 'X' for element 'segment'
          _view.r_for_graph.linkProperty("Value",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'Value' for element 'r_for_graph'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function combined_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = combined_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function combined_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Motion of Particles in a Potential Field </h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator2", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator2'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("MinimumX",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel'
      .setProperty("MinimumY",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("Enabled",false) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'drawingPanel'
      .setProperty("MaximumY",+5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel'
      .setProperty("MaximumX",+5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"p1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'p1'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'p1'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'p1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"force_on_p1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force_on_p1'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'force_on_p1'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'force_on_p1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"t_vel_m1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 't_vel_m1'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"m1_trace", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm1_trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'm1_trace'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"m1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm1'
      .setProperty("Text","m1") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm1'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"p2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'p2'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'p2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"force_on_p2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force_on_p2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'force_on_p2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'force_on_p2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"m2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm2'
      .setProperty("Text","m2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"tracce_for_m2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tracce_for_m2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tracce_for_m2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Com", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Com'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Com'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width",398) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/data/icons/osp/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/data/icons/osp/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/data/icons/osp/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/data/icons/osp/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'panel'
      .setProperty("BorderColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'panel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Angular_momentum_on_M1", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'Angular_momentum_on_M1'
      .setProperty("Text","Angular_momentum_on_M1") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Angular_momentum_on_M1'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"L", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'L'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"L_slider", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'L_slider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'L_slider'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'L_slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Variables", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Variables'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Variables'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'Variables'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'Variables'
      .setProperty("BorderColor","black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'Variables'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'Variables'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"k2", _view.Variables) // EJsS HtmlView.HtmlView Page: declaration of element 'k2'
      .setProperty("Text","k") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'k2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"k", _view.Variables) // EJsS HtmlView.HtmlView Page: declaration of element 'k'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'k'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'k'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'k'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"u", _view.Variables) // EJsS HtmlView.HtmlView Page: declaration of element 'u'
      .setProperty("Text","Potential Energy=(-k/R)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'u'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"U", _view.Variables) // EJsS HtmlView.HtmlView Page: declaration of element 'U'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"variables_panel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'variables_panel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Variables2", _view.variables_panel) // EJsS HtmlView.HtmlView Page: declaration of element 'Variables2'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Variables2'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'Variables2'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'Variables2'
      .setProperty("BorderColor","black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'Variables2'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'Variables2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Angle_for_m1", _view.Variables2) // EJsS HtmlView.HtmlView Page: declaration of element 'Angle_for_m1'
      .setProperty("Text","Angle for m1 velocity") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Angle_for_m1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"angle_a", _view.Variables2) // EJsS HtmlView.HtmlView Page: declaration of element 'angle_a'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'angle_a'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'angle_a'
      .setProperty("Maximum",6) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'angle_a'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Variables22", _view.variables_panel) // EJsS HtmlView.HtmlView Page: declaration of element 'Variables22'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Variables22'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'Variables22'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'Variables22'
      .setProperty("BorderColor","black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'Variables22'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'Variables22'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mass_1", _view.Variables22) // EJsS HtmlView.HtmlView Page: declaration of element 'mass_1'
      .setProperty("Text","Mass 1") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mass_1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"mass_12", _view.Variables22) // EJsS HtmlView.HtmlView Page: declaration of element 'mass_12'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'mass_12'
      .setProperty("Maximum",5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'mass_12'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"mw", _view.Variables22) // EJsS HtmlView.HtmlView Page: declaration of element 'mw'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.Variables22) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mas_2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'mas_2'
      .setProperty("Text","Mass 2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mas_2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"Mass_2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Mass_2'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'Mass_2'
      .setProperty("Maximum",5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'Mass_2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"m22", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'm22'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel2", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'separator'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel2", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel2'
      .setProperty("Text","<h1>Potential Vs R </h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"graph", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'graph'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.graph) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("TitleY","potential Energy") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","R (distance between 2 objects)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Title","Centrifugal potential and potential vs R") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"CB", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'CB'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'CB'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"U2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'U2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'U2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"for_effective_potential", _view.graph) // EJsS HtmlView.HtmlView Page: declaration of element 'for_effective_potential'
      .setProperty("TitleY","Effective Potential") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'for_effective_potential'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'for_effective_potential'
      .setProperty("TitleX","R (disstance R)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'for_effective_potential'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'for_effective_potential'
      .setProperty("Title","Effective potentisl vs R") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'for_effective_potential'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"EF", _view.for_effective_potential) // EJsS HtmlView.HtmlView Page: declaration of element 'EF'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'EF'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment", _view.for_effective_potential) // EJsS HtmlView.HtmlView Page: declaration of element 'segment'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segment'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'segment'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segment'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel3", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'panel3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","R") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"r_for_graph", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'r_for_graph'
      .setProperty("Width",450) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'r_for_graph'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'r_for_graph'
      .setProperty("Maximum",20) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'r_for_graph'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
  <hr />
	  <a href= "index.html"><img src="back.png" width="120" height="50" /></a>
<hr /> 
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Motion of particle in Potential Field<br />
      </p>
      <p>
      <img alt="author image" src="me.png" />
 Mushraf Inamdar
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2021, Mushraf Inamdar. Compiled with EJS 6.1 BETA (201115)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new combined("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
