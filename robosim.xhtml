<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function robo(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var x1; // EjsS Model.Variables.Var Table.x1
  var y1; // EjsS Model.Variables.Var Table.y1
  var state; // EjsS Model.Variables.Var Table.state
  var R; // EjsS Model.Variables.Var Table.R
  var g; // EjsS Model.Variables.Var Table.g
  var t; // EjsS Model.Variables.Var Table.t

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x : x,
      y : y,
      x1 : x1,
      y1 : y1,
      state : state,
      R : R,
      g : g,
      t : t
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      x : x,
      y : y,
      x1 : x1,
      y1 : y1,
      state : state,
      R : R,
      g : g,
      t : t
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.state != "undefined") state = json.state;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.t != "undefined") t = json.t;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.state != "undefined") state = json.state;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.t != "undefined") t = json.t;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["range"] = true;
    __pagesEnabled["conditions"] = true;
    __pagesEnabled["gravity conditions"] = true;
  });

  _model.addToReset(function() {
    x = -0.1; // EjsS Model.Variables.Var Table.x
    y = 0; // EjsS Model.Variables.Var Table.y
    x1 = 0; // EjsS Model.Variables.Var Table.x1
    y1 = 0; // EjsS Model.Variables.Var Table.y1
    state = 0; // EjsS Model.Variables.Var Table.state
    R = 0; // EjsS Model.Variables.Var Table.R
    g = -1; // EjsS Model.Variables.Var Table.g
    t = 0; // EjsS Model.Variables.Var Table.t
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["range"]) return;
    R=Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));  // > FixedRelations.range:1
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["conditions"]) return;
    if(state==1)  // > FixedRelations.conditions:1
    {  // > FixedRelations.conditions:2
      if(R<0.2)  // > FixedRelations.conditions:3
      {  // > FixedRelations.conditions:4
    x=x1;  // > FixedRelations.conditions:5
    y=y1-0.1;  // > FixedRelations.conditions:6
    }  // > FixedRelations.conditions:7
      // > FixedRelations.conditions:8
    }  // > FixedRelations.conditions:9
    else if(state==0)  // > FixedRelations.conditions:10
      {  // > FixedRelations.conditions:11
        y=(y1-0.1)+(0.5*g*t*t);  // > FixedRelations.conditions:12
          if(y<-0.8)  // > FixedRelations.conditions:13
           {  // > FixedRelations.conditions:14
             y=-0.9;  // > FixedRelations.conditions:15
           }  // > FixedRelations.conditions:16
             if(x>0.5)  // > FixedRelations.conditions:17
               {  // > FixedRelations.conditions:18
                 y=(y1-0.1)+(0.5*g*t*t);  // > FixedRelations.conditions:19
                  if(y<-0.3){y=-0.33;}  // > FixedRelations.conditions:20
                }  // > FixedRelations.conditions:21
      }  // > FixedRelations.conditions:22
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["gravity conditions"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new robo_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.extension_x_axis.linkProperty("SizeX",  function() { return 0.95+x1; } ); // HtmlView Page linking property 'SizeX' for element 'extension_x_axis'
          _view.extension_y_axis.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'extension_y_axis'
          _view.extension_y_axis.linkProperty("SizeY",  function() { return -1+y1; } ); // HtmlView Page linking property 'SizeY' for element 'extension_y_axis'
          _view.shape.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.robo.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'robo'
          _view.robo.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'robo'
          _view.checkBox.setAction("OnCheckOff", function(_data,_info) {
  state=0;
  t=0;

}); // HtmlView Page setting action 'OnCheckOff' for element 'checkBox'
          _view.checkBox.setAction("OnCheckOn", function(_data,_info) {
  state=1;

}); // HtmlView Page setting action 'OnCheckOn' for element 'checkBox'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function robo_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = robo_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function robo_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator3", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Pulley Robot</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator4", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator4'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"extension_x_axis", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'extension_x_axis'
      .setProperty("X",-0.95) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'extension_x_axis'
      .setProperty("Y",0.95) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'extension_x_axis'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'extension_x_axis'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'extension_x_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"extension_y_axis", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'extension_y_axis'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'extension_y_axis'
      .setProperty("Y",0.95) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'extension_y_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"robo", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'robo'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'robo'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'robo'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'robo'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"stand", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stand'
      .setProperty("FillColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'stand'
      .setProperty("SizeX",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'stand'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'stand'
      .setProperty("X",-0.95) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'stand'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'stand'
      .setProperty("SizeY",1.9) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'stand'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ground'
      .setProperty("FillColor","rgba(0,128,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ground'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground'
      .setProperty("SizeY",0.1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ground'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"tabletop", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tabletop'
      .setProperty("FillColor","rgba(128,64,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tabletop'
      .setProperty("SizeX",0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tabletop'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tabletop'
      .setProperty("X",0.75) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'tabletop'
      .setProperty("Y",-.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tabletop'
      .setProperty("SizeY",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tabletop'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Table", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Table'
      .setProperty("X",0.8) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Table'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Table'
      .setProperty("Text","Table") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Table'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator2", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator2'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"checkBox", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkBox'
      .setProperty("Text","Attach") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkBox'
      .setProperty("Font","normal normal 19px \"Times New Roman\", Times, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'checkBox'
      ;

    _view._addElement(EJSS_INTERFACE.separator,"separator", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'separator'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","click and move the red pulley end, and get it close to object check attach to attach the  object, move the object using pulley. To release uncheck attach checkbox.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
  <hr />
	  <a href= "index.html"><img src="back.png" width="120" height="50" /></a>
<hr /> 
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2021, Author name. Compiled with EJS 6.0 (191124)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new robo("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
